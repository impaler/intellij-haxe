{
    parserClass="com.intellij.plugins.haxe.lang.parser.HaxeParser"
    parserUtilClass="com.intellij.lang.parser.GeneratedParserUtilBase"

    implements="com.intellij.plugins.haxe.lang.psi.HaxePsiCompositeElement"
    extends="com.intellij.plugins.haxe.lang.psi.impl.HaxePsiCompositeElementImpl"

    psiClassPrefix="Haxe"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.plugins.haxe.lang.psi"
    psiImplPackage="com.intellij.plugins.haxe.lang.psi.impl"

    elementTypeHolderClass="com.intellij.plugins.haxe.lang.lexer.HaxeTokenTypes"
    elementTypeClass="com.intellij.plugins.haxe.lang.lexer.HaxeElementType"
    tokenTypeClass="com.intellij.plugins.haxe.lang.lexer.HaxeElementType"

    generateFirstCheck=100

    pLCURLY="{"
    pRCURLY="}"
    pLBRACK="["
    pRBRACK="]"
    pLPAREN="("
    pRPAREN=")"
    oCOLON=":"
    oSEMI=";"
    oCOMMA=","
    oDOT="."
    oEQ="=="
    oASSIGN="="
    oNOT_EQ="!="
    oNOT="!"
    oCOMPLEMENT="~"
    oPLUS_PLUS="++"
    oPLUS_ASSIGN="+="
    oPLUS="+"
    oMINUS_MINUS="--"
    oMINUS_ASSIGN="-="
    oMINUS="-"

    oQUEST="?"

    oCOND_OR="||"
    oBIT_OR="|"
    oBIT_OR_ASSIGN="|="

    oCOND_AND="&&"

    oBIT_AND_ASSIGN="&="
    oBIT_AND="&"

    oSHIFT_LEFT_ASSIGN="<<="
    oSHIFT_LEFT="<<"
    oLESS_OR_EQUAL="<="
    oLESS="<"

    oBIT_XOR_ASSIGN="^="
    oBIT_XOR="^"

    oMUL_ASSIGN="*="
    oMUL="*"

    oQUOTIENT_ASSIGN="/="
    oQUOTIENT="/"

    oREMAINDER_ASSIGN="%="
    oREMAINDER="%"

    oSHIFT_RIGHT_ASSIGN=">>="
    oGREATER_OR_EQUAL=">="
    oGREATER=">"

    oTRIPLE_DOT="..."
    OIN='in'
    OARROW='->'

    oNEW="new"

    ppIF="#if"
    ppELSE="#else"
    ppELSEIF="#elseif"
    ppEND="#end"
    ppERROR="#error"

    kBREAK="break"
    kDEFAULT="default"
    kPACKAGE="package"
    kFUNCTION="function"

    kCASE="case"
    kCAST="cast"

    kABSTRACT="abstract"
    kFROM="from"
    kTO="to"

    kCLASS="class"
    kENUM="enum"
    kINTERFACE="interface"

    kIMPLEMENTS="implements"
    kEXTENDS="extends"

    kNULL ="null"
    kTRUE ="true"
    kFALSE ="false"
    kTHIS ="this"
    kSUPER ="super"

    kIF ="if"
    kFOR ="for"
    kDO ="do"
    kWHILE ="while"
    kRETURN="return"
    kIMPORT ="import"
    kUSING ="using"
    kCONTINUE ="continue"
    kELSE ="else"
    kSWITCH ="switch"
    kTHROW ="throw"

    kVAR="var"
    kSTATIC="static"
    kPUBLIC="public"
    kPRIVATE="private"
    kDYNAMIC="dynamic"
    kNEVER="never"
    kOVERRIDE="override"
    kINLINE="inline"
    kSET="set"
    kGET="get"

    kUNTYPED="untyped"
    kTYPEDEF="typedef"

    kEXTERN="extern"
    kFINAL="@:final"
    kHACK="@:hack"
    kNATIVE="@:native"
    kMACRO="macro"
    kBUILD="@:build"
    kAUTOBUILD="@:autoBuild"
    kKEEP="@:keep"
    kREQUIRE="@:require"
    kFAKEENUM="@:fakeEnum"
    kCOREAPI="@:core_api"

    kBIND="@:bind"
    kBITMAP="@:bitmap"
    kNS="@:ns"
    kPROTECTED="@:protected"
    kGETTER="@:getter"
    kSETTER="@:setter"
    kDEBUG="@:debug"
    kNODEBUG="@:nodebug"
    kMETA="@:meta"
    kOVERLOAD="@:overload"

    kTRY="try"
    kCATCH="catch"

    ppIf="#if"
    ppElse="#else"
    ppError="#error"
    ppElseIf="#elseif"

    extends(".*(Expression|Literal)")="expression"
    pin(".*Expression")=1
    pin(".*Statement")=1
    pin(".*Meta")=1
}

haxeFile ::= packageStatement? topLevelList

/*
  http://haxe.org/manual/metadata
  http://haxe.org/manual/tips_and_tricks
*/
private macroClass ::= '@:final' | '@:keep' | '@:coreApi' | '@:bind' | 'macro' | '@:hack'
                      | requireMeta | fakeEnumMeta | nativeMeta | bitmapMeta | nsMeta | customMeta | metaMeta | buildMacro | autoBuildMacro

private functionMacroMember ::= macroMember | overloadMeta
private macroMember ::= 'macro' | '@:protected' | '@:debug' | '@:nodebug' | '@:keep'
                       | requireMeta | nsMeta | getterMeta | setterMeta | customMeta | metaMeta | buildMacro | autoBuildMacro

buildMacro ::= '@:build' '(' referenceExpression (callExpression | arrayAccessExpression | qualifiedReferenceExpression)* ')' {pin=2}
autoBuildMacro ::= '@:autoBuild' '(' referenceExpression (callExpression | arrayAccessExpression | qualifiedReferenceExpression)* ')' {pin=2}
requireMeta ::=  '@:require' '(' identifier ')'
fakeEnumMeta ::=  '@:fakeEnum' '(' type ')'
nativeMeta ::=  '@:native' '(' stringLiteralExpression ')'
bitmapMeta ::= '@:bitmap' '(' stringLiteralExpression ')'
nsMeta ::= '@:ns' '(' stringLiteralExpression ')'
getterMeta ::= '@:getter' '(' referenceExpression ')'
setterMeta ::= '@:setter' '(' referenceExpression ')'
overloadMeta ::= '@:overload' '(' anonymousFunctionDeclaration ')'
customMeta ::= MACRO_ID ('(' expressionList ')')?
metaMeta ::= '@:meta' '(' ID '(' metaPartList? ')' ')'
private metaPartList ::= metaKeyValue (',' metaKeyValue)*
metaKeyValue ::= ID '=' stringLiteralExpression

private metaKeyWord ::= MACRO_ID | '@:final' | '@:hack' | '@:native' | 'macro' | '@:build' | '@:autoBuild' | '@:keep' | '@:require' | '@:fakeEnum' | '@:core_api' | '@:bind' | '@:bitmap' | '@:ns' | '@:protected' | '@:getter' | '@:setter' | '@:debug' | '@:nodebug' | '@:meta' | '@:overload'

assignOperation ::= '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '|=' | '^=' | '<<=' | '>>=' | '>>>='
compareOperation ::= '==' | '!=' | '<=' | '<' | '>' | '>='
bitOperation ::= '|' | '&' | '^'
shiftOperator ::= unsignedShiftRightOperator | shiftRightOperator | '<<'

shiftRightOperator ::= '>' '>'
unsignedShiftRightOperator ::= '>' '>' '>'

packageStatement ::= 'package' simpleQualifiedReferenceExpression? ';' {pin=1}

private topLevelList ::= topLevel*
private topLevel ::= importStatement | usingStatement | topLevelDeclaration {recoverUntil="top_level_recover"}
private top_level_recover ::= !('#else' | '#elseif' | '#end' | '#error' | '#if' | metaKeyWord | 'abstract' | 'class'  | 'enum' | 'extern' | 'import' | 'using' | 'interface' | 'private' | 'typedef')

importStatement ::= 'import' simpleQualifiedReferenceExpression ';' {pin=1}
usingStatement ::= 'using' simpleQualifiedReferenceExpression ';' {pin=1}

private topLevelDeclaration ::= classDeclaration
                              | externClassDeclaration
                              | abstractClassDeclaration
                              | interfaceDeclaration
                              | enumDeclaration
                              | typedefDeclaration

externOrPrivate ::= 'extern' | 'private'

typedefDeclaration ::= externOrPrivate? 'typedef' componentName genericParam? '=' functionTypeWrapper ';'?
{pin=2 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeTypeDefImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}

externClassDeclaration ::= macroClass* externOrPrivate* 'class' componentName genericParam? inheritList? '{' externClassDeclarationBody '}'
{pin=4 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxePsiClass" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}
externClassDeclarationBody ::= externClassDeclarationBodyPart*
private externClassDeclarationBodyPart ::= varDeclaration | externFunctionDeclaration {recoverUntil="extern_class_body_part_recover"}
private extern_class_body_part_recover ::= !('#else' | '#elseif' | '#end' | '#error' | '#if' | metaKeyWord | 'dynamic' | 'function' | 'inline' | 'override' | 'private' | 'public' | 'static' | 'var' | '}')

classDeclaration ::= macroClass* 'private'? 'class' componentName genericParam? inheritList? '{' classBody '}'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxePsiClass" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}

abstractClassDeclaration ::= macroClass* 'private'? 'abstract' componentName genericParam? ('(' type ')')? (('from' | 'to') type)* '{' classBody '}'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxePsiClass" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}

classBody ::= classBodyPart*
private classBodyPart ::= varDeclaration | functionDeclarationWithAttributes {recoverUntil="class_body_part_recover"}
private class_body_part_recover ::= !('#else' | '#elseif' | '#end' | '#error' | '#if' | metaKeyWord | 'dynamic' | 'function' | 'inline' | 'override' | 'private' | 'public' | 'static' | 'var' | '}')

interfaceDeclaration ::= macroClass* externOrPrivate? 'interface' componentName genericParam? inheritList? '{' interfaceBody '}'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxePsiClass" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}
interfaceBody ::= interfaceBodyPart*
private interfaceBodyPart ::= varDeclaration | functionPrototypeDeclarationWithAttributes {recoverUntil="interface_body_part_recover"}
private interface_body_part_recover ::= !('#else' | '#elseif' | '#end' | '#error' | '#if' | metaKeyWord | 'dynamic' | 'function' | 'inline' | 'override' | 'private' | 'public' | 'static' | 'var' | '}')

enumDeclaration ::= macroClass* externOrPrivate? 'enum' componentName genericParam? '{' enumBody '}'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxePsiClass" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}
enumBody ::= enumValueDeclaration*

/*
 *  declarations
 */

access ::= 'public' | 'private'
declarationAttribute ::= 'static' | 'inline' | 'dynamic' | 'override' | access

enumValueDeclaration ::= componentName enumConstructorParameters? ';'
{recoverUntil="enum_value_declaration_recovery" mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}

private enum_value_declaration_recovery ::= !(ID | '}')

enumConstructorParameters ::= '(' parameterList? ')' {pin=1}

varDeclaration ::= (macroMember | declarationAttribute)* 'var' varDeclarationPartList ';' {pin=3}
private varDeclarationPartList ::= varDeclarationPart (',' varDeclarationPart)*
varDeclarationPart ::= componentName propertyDeclaration? typeTag? varInit?
{recoverUntil="var_declaration_part_recover" mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}
private var_declaration_part_recover ::= !(';' | ',')

localVarDeclaration ::= 'var' localVarDeclarationPartList ';'? {pin=1 }
private localVarDeclarationPartList ::= localVarDeclarationPart (',' localVarDeclarationPart)*
localVarDeclarationPart ::= componentName propertyDeclaration? typeTag? varInit?
{recoverUntil="local_var_declaration_part_recover" mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}
private local_var_declaration_part_recover ::= !('!' | '#else' | '#elseif' | '#end' | '#error' | '#if' | '(' | ')' | '++' | ',' | '-' | '--' | ';' | '[' | 'break' | 'case' | 'cast' | 'continue' | 'default' | 'do' | 'else' | 'false' | 'for' | 'function' | 'if' | 'new' | 'null' | 'return' | 'super' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'untyped' | 'var' | 'while' | '{' | '}' | '~' | ID | OPEN_QUOTE | LITFLOAT | LITHEX | LITINT | LITOCT | REG_EXP)

propertyDeclaration ::= '(' ('get' | propertyAccessor) ',' ('set' | propertyAccessor) ')'

propertyAccessor ::= 'null' | 'default' | 'dynamic' | 'never'

private functionCommonBody ::= blockStatement | returnStatementWithoutSemicolon | expression | throwStatement

externFunctionDeclaration ::= (functionMacroMember| declarationAttribute)* 'function' ('new' | componentName genericParam?) '(' parameterList? ')' typeTag? 'untyped'? (functionCommonBody | ';')
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponentWithDeclarationList"}
functionDeclarationWithAttributes ::= (functionMacroMember | declarationAttribute)* 'function' ('new' | componentName genericParam?) '(' parameterList? ')' typeTag? 'untyped'? functionCommonBody
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponentWithDeclarationList"}
functionPrototypeDeclarationWithAttributes ::= (functionMacroMember| declarationAttribute)* 'function' ('new' | componentName genericParam?) '(' parameterList? ')' typeTag? 'untyped'? ';'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponentWithDeclarationList"}
localFunctionDeclaration ::= 'function' componentName genericParam? '(' parameterList? ')' typeTag? 'untyped'? functionCommonBody
{pin=2 mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}
anonymousFunctionDeclaration ::= 'function' '(' parameterList? ')' typeTag? 'untyped'? '{' '}' {pin=2}
/*
 *
 */

varInit ::= '=' expression {pin=1}
parameter ::= '?'? componentName typeTag? varInit?
{mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}

parameterList ::= parameter (',' parameter)* {recoverUntil="parameterListRecovery"}
private parameterListRecovery ::= !')' // after parameterList always ')'

functionLiteral ::= 'function' '(' parameterList? ')' typeTag? 'untyped'? functionCommonBody {pin=2}
arrayLiteral ::= '[' (forStatement | whileStatement | expressionList)? ']'
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

private functionTypeWrapper ::= functionTypeOrWrapper functionType*
private functionTypeOrWrapper ::= typeOrAnonymous | '(' functionTypeWrapper ')'
left functionType ::= '->' typeOrAnonymous

typeTag ::= ':' functionTypeWrapper
typeParam ::= '<' typeList '>'
typeList ::= typeListPart (',' typeListPart)*
genericParam ::= '<' genericListPart (',' genericListPart)* '>'
genericListPart ::= componentName (':' ('(' typeList ')' | typeListPart))?
{mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}
typeListPart ::= functionTypeWrapper
type ::= referenceExpression qualifiedReferenceExpression* typeParam?
typeOrAnonymous ::= type | anonymousType

blockStatement ::= '{' statementList? '}'
private statementList ::= (statement ';'?)+ {recoverUntil="statement_recovery"}
private statement_recovery ::= !('case' | 'default' | '}')

private statement ::= blockStatement | notBlockStatement


private notBlockStatement ::= ('untyped' statement ';'?)
                            | localVarDeclaration
                            | localFunctionDeclaration
                            | ifStatement
                            | forStatement
                            | whileStatement
                            | doWhileStatement
                            | returnStatement
                            | breakStatement
                            | continueStatement
                            | switchStatement
                            | throwStatement
                            | tryStatement
                            | expression

ifStatement ::= 'if' '(' expression ')' statement ';'? ('else' statement ';'?)?

forStatement ::= 'for' '(' componentName 'in' iterable')' statement ';'?
{mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}

iterable ::= expression

whileStatement ::= 'while' '(' expression ')' statement ';'?
doWhileStatement ::= 'do' statement 'while' '(' expression ')' ';'

returnStatement ::= 'return' expression? ';'?
returnStatementWithoutSemicolon ::= 'return' expression

breakStatement ::= 'break' ';'
continueStatement ::= 'continue' ';'

throwStatement ::= 'throw' expression ';'?

switchStatement ::= 'switch' expression switchBlock
switchBlock ::= '{'  switchCase* defaultCase? '}' {pin=1}
switchCaseBlock ::= (literalExpression ";") | statementList
switchCase ::= ('case' switchCaseExpression (',' switchCaseExpression)* ':')+ switchCaseBlock? {pin=1 recoverUntil="switch_case_recover"}
switchCaseExpression ::= expression ('if' '(' expression ')')? {pin=1 extends="expression"}
private switch_case_recover ::= !('case' | 'default' | '}' | ID)
defaultCase::= 'default' ':' switchCaseBlock? {pin=1}

tryStatement ::= 'try' statement ';'? catchStatement*
catchStatement ::= 'catch' '(' parameter ')' statement ';'?

/*
 * expressions
 */

expressionList ::= expression (',' expression)* {recoverUntil="expression_list_recover"}
private expression_list_recover ::= !(')' | ']')

expression ::= assignExpressionWrapper {recoverUntil="expression_recover"}
private expression_recover ::= !('!' | '!=' | '%' | '%=' | '&&' | '&' | '&=' | '(' | ')' | '*' | '*=' | '+' | '++' | '+=' | ',' | '-' | '--' | '-=' | '.' | '...' | '/' | '/=' | ':' | ';' | '<' | '<<' | '<<=' | '<=' | '=' | '==' | '>' | '>=' | '>>=' | '>>>=' | '?' | metaKeyWord | '[' | ']' | '^' | '^=' | 'break' | 'case' | 'cast' | 'catch' | 'continue' | 'default' | 'do' | 'dynamic' | 'else' | 'false' | 'for' | 'function' | 'if' | 'inline' | 'new' | 'null' | 'override' | 'private' | 'public' | 'return' | 'static' | 'super' | 'switch' | 'this' | 'throw' | 'true' | 'try' | 'untyped' | 'var' | 'while' | '{' | '|' | '|=' | '||' | '}' | '~' | ID | LITFLOAT | LITHEX | LITINT | LITOCT | OPEN_QUOTE | CLOSING_QUOTE | MACRO_ID | REG_EXP | LONG_TEMPLATE_ENTRY_END)

private assignExpressionWrapper ::= iteratorExpressionWrapper assignExpression*
left assignExpression ::= assignOperation iteratorExpressionWrapper {pin=1 extends="expression"}

private iteratorExpressionWrapper ::= ternaryExpressionWrapper iteratorExpression?
left iteratorExpression ::= '...' ternaryExpressionWrapper

private ternaryExpressionWrapper ::= logicOrExpressionWrapper ternaryExpression?
left ternaryExpression ::= '?' expression ':' ternaryExpressionWrapper

private logicOrExpressionWrapper ::= logicAndExpressionWrapper logicOrExpression*
left logicOrExpression ::= '||' logicAndExpressionWrapper

private logicAndExpressionWrapper ::= compareExpressionWrapper logicAndExpression*
left logicAndExpression ::= '&&' compareExpressionWrapper

private compareExpressionWrapper ::= bitwiseExpressionWrapper compareExpression*
left compareExpression ::= compareOperation bitwiseExpressionWrapper

private bitwiseExpressionWrapper ::= shiftExpressionWrapper bitwiseExpression*
left bitwiseExpression ::= bitOperation shiftExpressionWrapper

private shiftExpressionWrapper ::= additiveExpressionWrapper shiftExpression*
left shiftExpression ::= shiftOperator additiveExpressionWrapper

private additiveExpressionWrapper ::= multiplicativeExpressionWrapper additiveExpression*
left additiveExpression ::= ('+' | '-') multiplicativeExpressionWrapper

private multiplicativeExpressionWrapper ::= prefixExpression multiplicativeExpression*
left multiplicativeExpression ::= ('*' | '/' | '%') (prefixExpression | suffixExpressionWrapper)

prefixExpression ::= ('-' | '--' | '++' | '!' | '~') prefixExpression | suffixExpressionWrapper

private suffixExpressionWrapper ::= value suffixExpression*
left suffixExpression ::= ('--' | '++')

private value ::= 'untyped' expression
                | (literalExpression qualifiedReferenceTail?)
                | ifStatement
                | castExpression qualifiedReferenceTail?
                | newExpressionOrCall
                | parenthesizedExpressionOrCall
                | callOrArrayAccess
                | tryStatement
                | switchStatement

literalExpression ::= LITINT | LITHEX | LITOCT | LITFLOAT
                    | regularExpressionLiteral
                    | 'null' | 'true' | 'false'
                    | functionLiteral
                    | arrayLiteral
                    | objectLiteral
                    | stringLiteralExpression
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

stringLiteralExpression ::= OPEN_QUOTE (REGULAR_STRING_PART | shortTemplateEntry | longTemplateEntry)* CLOSING_QUOTE
{pin=1 mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

shortTemplateEntry ::= SHORT_TEMPLATE_ENTRY_START (thisExpression | referenceExpression) {pin=1}
longTemplateEntry ::= LONG_TEMPLATE_ENTRY_START expression LONG_TEMPLATE_ENTRY_END {pin=1}


regularExpressionLiteral ::= REG_EXP
{extends="literalExpression" mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeRegularExpressionImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeRegularExpression"}

private parenthesizedExpressionOrCall ::= parenthesizedExpression qualifiedReferenceTail?
parenthesizedExpression ::= '(' (expression | statement) ')'

private newExpressionOrCall ::= newExpression qualifiedReferenceTail?
private qualifiedReferenceTail ::= qualifiedReferenceExpression (callExpression | arrayAccessExpression | qualifiedReferenceExpression)*

private callOrArrayAccess ::= (referenceExpression | thisExpression | superExpression) (callExpression | arrayAccessExpression | qualifiedReferenceExpression)*

left callExpression ::= '(' expressionList? ')'
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}
left arrayAccessExpression ::= '[' expression? ']'
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

referenceExpression ::= identifier
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}
left qualifiedReferenceExpression ::= '.' referenceExpression {elementType="referenceExpression"}
simpleQualifiedReferenceExpression ::= referenceExpression qualifiedReferenceExpression * {elementType="referenceExpression"}
componentName ::= identifier
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeNamedElementImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeNamedElement"}
identifier ::= ID

thisExpression ::= 'this'
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

superExpression ::= 'super'
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

newExpression ::= 'new' type '(' expressionList? ')'
{pin=2 mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

castExpression ::= 'cast' (('(' expression ',' functionTypeWrapper ')')  | expression)
{mixin="com.intellij.plugins.haxe.lang.psi.impl.HaxeClassReferenceImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeReference"}

inheritList ::= inherit (','? inherit)*

inherit ::= ('extends' | 'implements') type {pin=1 recoverUntil="inherit_recover"}
private inherit_recover ::= !(',' | '{' | 'extends' | 'implements')

anonymousType ::= '{' anonymousTypeBody '}'
{pin=3 mixin="com.intellij.plugins.haxe.lang.psi.impl.AnonymousHaxeTypeImpl" implements="com.intellij.plugins.haxe.lang.psi.HaxeClass"}

anonymousTypeBody ::= extendedAnonymousTypeBody | simpleAnonymousTypeBody | interfaceBody
private extendedAnonymousTypeBody ::= typeExtends (',' anonymousTypeFieldList)? (',' interfaceBody)?
private simpleAnonymousTypeBody ::= anonymousTypeFieldList (',' interfaceBody)?

typeExtends ::= '>' type

anonymousTypeFieldList ::= anonymousTypeField (',' anonymousTypeField)*

anonymousTypeField ::= componentName typeTag
{mixin="com.intellij.plugins.haxe.lang.psi.impl.AbstractHaxeNamedComponent" implements="com.intellij.plugins.haxe.lang.psi.HaxeComponent"}

objectLiteral ::= '{' objectLiteralElementList? '}'

private objectLiteralElementList ::= objectLiteralElement (',' objectLiteralElement)* {recoverUntil="object_literal_list_recover"}
private object_literal_list_recover ::= !('}')

objectLiteralElement ::= identifier ':' expression {recoverUntil="object_literal_part_recover"}
private object_literal_part_recover ::= !(',' | '}')







